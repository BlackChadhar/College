EXP 1
1. Explore Linux Commands and system calls for file, directory and process management. (mkdir, chdir, cat, ls, chown, chmod, chgrp, ps etc.             
mkdir - make directories 
mkdir DIRECTORY(ies)         

cat - concatenate files and print on the standard output 
 cat [OPTION]... [FILE]...
-n :: number all output lines
 -E :: display $ at end of each line 
-T :: display TAB characters as ^I
 -A:: equivalent to -vET   

ls [OPTION]... [FILE]...
-a :: do not ignore entries starting with .
 -d :: list directory entries instead of contents 
-l :: use a long listing format 
-r :: :reverse order while sorting
Linux Commands and System Calls:
mkdir my_directory
cd my_directory
echo "Hello, world!" > my_file.txt
ls
whoami
logname

# System Calls
#include <stdio.h>
#include <sys/types.h>
#include <unistd.h>
int main() {
    pid_t pid = getpid();
    pid_t ppid = getppid();
    uid_t uid = getuid();
    gid_t gid = getgid();
    uid_t euid = geteuid();
    gid_t egid = getegid();
    printf("Process ID: %d\n", pid);
    printf("Parent Process ID: %d\n", ppid);
    printf("User ID: %d\n", uid);
    printf("Group ID: %d\n", gid);
    printf("Effective User ID: %d\n", euid);
    printf("Effective Group ID: %d\n", egid);
 return 0;
}

 2. system calls: open, read, write, close, getpid, setpid, getuid, getgid, getegid, geteuid. sort, grep, awk)
System calls:

#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <fcntl.h>
#include <sys/types.h>
#include <sys/stat.h>
int main() {
    // Example of open, read, write, close system calls
    int fd = open("example.txt", O_RDWR | O_CREAT, S_IRUSR | S_IWUSR);
    if (fd == -1) {
        perror("open");
        exit(EXIT_FAILURE);
    }
    char buffer[100];
    ssize_t bytes_read = read(fd, buffer, sizeof(buffer));
    if (bytes_read == -1) {
        perror("read");
        close(fd);
        exit(EXIT_FAILURE);
    }
    ssize_t bytes_written = write(STDOUT_FILENO, buffer, bytes_read);
    if (bytes_written == -1) {
        perror("write");
        close(fd);
        exit(EXIT_FAILURE);
    }
    close(fd);
    // Example of getpid system call
    pid_t pid = getpid();
    printf("Process ID: %d\n", pid);
    // Example of getuid system call
    uid_t uid = getuid();
    printf("User ID: %d\n", uid);
    // Example of getgid system call
    gid_t gid = getgid();
    printf("Group ID: %d\n", gid);
    // Example of geteuid system call
    uid_t euid = geteuid();
    printf("Effective User ID: %d\n", euid);
    // Example of getegid system call
    gid_t egid = getegid();
    printf("Effective Group ID: %d\n", egid);
    // Example of sorting using system call sort
    system("sort example.txt > sorted_example.txt");
    // Example of using grep to search for a pattern
    system("grep 'pattern' example.txt");
    // Example of using awk to process text
    system("awk '{print $1}' example.txt");
    return 0;
}
EXP 2
 3.  Linux shell script 
Write shell scripts to do the following: 
a. Display OS version, release number, kernel version 
echo "current OS version, release number, kernel version are:" 
uname -a
b.  Display top 10 processes in descending order 
echo "Top 10 processes in descending order are:"
 ps -eo pid, ppid,cmd,%mem, %cpu --sort=-%mem |head

c. Display processes with highest memory usage. 
echo "Processes with highest memory usage are:" 
ps aux |sort -nk +4 |tail
d. Display current logged in user and log name. 
echo "current logged in users and logname are:"
 logname
e. Display current shell, home directory, operating system type, current path setting, current working directory. 
echo "current shell is:"
 echo $SHELL 
 echo "home directory is:" 
$HOME 
echo "Current path is:" 
echo $PATH 
echo "current working directory is" 
pwd
EXP 3
4.Linux- API: Implement basic commands of linux like ls, cp, mv and others using kernel APIs.
ls [options] [file|dir]
OPTIONS 
ls -a list all files including hidden file starting with '.' 
ls --color colored list [=always/never/auto] 
ls -d list directories - with ' */' 
ls -F add one char of */=>@| to enteries 
ls -i list file's inode index number 
ls -l list with long format - show permissions 
ls -la list long format including hidden files 
ls -lh list long format with readable file size 
ls -ls list with long format with file size 
ls -r list in reverse order 
ls -R list recursively directory tree 
ls -s list file size 
ls -S sort by file size 
ls -t sort by time & date 
ls -X sort by extension name

cp [options] source dest 
cp [options] source... directory
cp -a archive files 
cp -f force copy by removing the destination file if needed 
cp -i interactive - ask before overwrite 
cp -l link files instead of copy 
cp -L follow symbolic links 
cp -n no file overwrite 
cp -R recursive copy (including hidden files) 
cp -u update - copy when source is newer than dest 
cp -v verbose - print informative messages

mv [options] source dest 
mv [options] source... directory
mv -f force move by overwriting destination file without prompt 
mv -i interactive prompt before overwrite 
mv -u update - move when source is newer than destination 
mv -v verbose - print source and destination files 
man mv -help manual

Linux API:
#include <stdio.h>
#include <stdlib.h>
#include <fcntl.h>
#include <unistd.h>
#include <dirent.h>
#include <string.h>
#include <sys/stat.h>
#define BUF_SIZE 4096
// Function to list directory contents
void list_directory(const char *path) {
    DIR *dir;
    struct dirent *entry;
    // Open the directory
    dir = opendir(path);
    if (dir == NULL) {
        perror("opendir");
        exit(EXIT_FAILURE);
    }
    // Read and print directory contents
    while ((entry = readdir(dir)) != NULL) {
        printf("%s\n", entry->d_name);
    }
    // Close the directory
    closedir(dir);
}
// Function to copy a file
void copy_file(const char *source, const char *destination) {
    int source_fd, dest_fd;
    ssize_t bytes_read, bytes_written;
    char buffer[BUF_SIZE];
    // Open the source file for reading
    source_fd = open(source, O_RDONLY);
    if (source_fd == -1) {
        perror("open");
        exit(EXIT_FAILURE);
    }
    // Create or open the destination file for writing
    dest_fd = open(destination, O_WRONLY | O_CREAT | O_TRUNC, S_IRUSR | S_IWUSR | S_IRGRP | S_IROTH);
    if (dest_fd == -1) {
        perror("open");
        close(source_fd);
        exit(EXIT_FAILURE);
    }
    // Copy data from source to destination
    while ((bytes_read = read(source_fd, buffer, BUF_SIZE)) > 0) {
        bytes_written = write(dest_fd, buffer, bytes_read);
        if (bytes_written != bytes_read) {
            perror("write");
            close(source_fd);
            close(dest_fd);
            exit(EXIT_FAILURE);
        }
    }
    // Close file descriptors
    close(source_fd);
    close(dest_fd);
}
// Function to move a file
void move_file(const char *source, const char *destination) {
    // Rename the source file to the destination file
    if (rename(source, destination) == -1) {
        perror("rename");
        exit(EXIT_FAILURE);
    }
}
int main(int argc, char *argv[]) {
    if (argc < 2) {
        fprintf(stderr, "Usage: %s <command> [arguments]\n", argv[0]);
        exit(EXIT_FAILURE);
    }
    const char *command = argv[1];
    if (strcmp(command, "ls") == 0) {
        // Check if directory path is provided as argument
        const char *dir_path = (argc > 2) ? argv[2] : ".";
        // List the contents of the directory
        list_directory(dir_path);
    } else if (strcmp(command, "cp") == 0) {
        if (argc != 4) {
            fprintf(stderr, "Usage: %s cp <source> <destination>\n", argv[0]);
            exit(EXIT_FAILURE);
        }
        // Copy the file
        copy_file(argv[2], argv[3]);
        printf("File copied successfully.\n");
    } else if (strcmp(command, "mv") == 0) {
        if (argc != 4) {
            fprintf(stderr, "Usage: %s mv <source> <destination>\n", argv[0]);
            exit(EXIT_FAILURE);
        }
        // Move the file
        move_file(argv[2], argv[3]);
        printf("File moved successfully.\n");
    } else {
        fprintf(stderr, "Unknown command: %s\n", command);
        exit(EXIT_FAILURE);
    }
    return 0;
}
EXP 4
5.Linux- Process
Create a child process in Linux using the fork system call. From the child process obtain the process ID of both child and parent by using getpid and getppid system call. 
#include <stdio.h> 
#include <sys/types.h> 
#include <unistd.h>  
int main() { 
   pid_t pid, mypid, myppid; 
   pid = getpid(); 
   printf("Before fork: Process id is %d\n", pid); 
   pid = fork(); 
   if (pid < 0) { 
      perror("fork() failure\n"); 
      return 1; 
   } 
   // Child process 
   if (pid == 0) { 
      printf("This is child process\n"); 
      mypid = getpid(); 
      myppid = getppid(); 
      printf("Process id is %d and PPID is %d\n", mypid, myppid); 
   } else { // Parent process  
      sleep(2); 
      printf("This is parent process\n"); 
      mypid = getpid(); 
      myppid = getppid(); 
      printf("Process id is %d and PPID is %d\n", mypid, myppid); 
      printf("Newly created process id or child pid is %d\n", pid); 
   } 
   return 0;
}
EXP 5
6.Process Management: Scheduling:Write a program to implement the concept of non-pre-emptive and Pre-emptive scheduling algorithms and demonstrate using CPU OS simulator.
Process Management: Scheduling
#include <stdio.h>
#include <limits.h>
#include <stdbool.h>
// Process structure
typedef struct {
    int id;
    int burstTime;
    int arrivalTime;
    int priority;
    bool executed;
} Process;
// Function to sort processes by arrival time
void sortByArrivalTime(Process processes[], int n) {
    for (int i = 0; i < n - 1; ++i) {
        for (int j = 0; j < n - i - 1; ++j) {
            if (processes[j].arrivalTime > processes[j + 1].arrivalTime) {
                Process temp = processes[j];
                processes[j] = processes[j + 1];
                processes[j + 1] = temp;
            }
        }
    }
}
// Function to sort processes by burst time
void sortByBurstTime(Process processes[], int n) {
    for (int i = 0; i < n - 1; ++i) {
        for (int j = 0; j < n - i - 1; ++j) {
            if (processes[j].burstTime > processes[j + 1].burstTime) {
                Process temp = processes[j];
                processes[j] = processes[j + 1];
                processes[j + 1] = temp;
            }
        }
    }
}
// Function to find the process with the highest priority
int findHighestPriority(Process processes[], int n) {
    int highestPriority = INT_MAX;
    int index = -1;
    for (int i = 0; i < n; ++i) {
        if (!processes[i].executed && processes[i].priority < highestPriority) {
            highestPriority = processes[i].priority;
            index = i;
        }
    }
    return index;
}
// Function to simulate FCFS scheduling
void fcfs(Process processes[], int n) {
    printf("FCFS Scheduling:\n");
    int currentTime = 0;
    for (int i = 0; i < n; ++i) {
        currentTime += processes[i].burstTime;
        printf("Process %d executed from time %d to %d\n", processes[i].id, currentTime - processes[i].burstTime, currentTime);
    }
}
// Function to simulate SJF scheduling
void sjf(Process processes[], int n) {
    printf("\nSJF Scheduling:\n");
    sortByBurstTime(processes, n);
    int currentTime = 0;
    for (int i = 0; i < n; ++i) {
        currentTime += processes[i].burstTime;
        printf("Process %d executed from time %d to %d\n", processes[i].id, currentTime - processes[i].burstTime, currentTime);
    }
}
// Function to simulate Priority scheduling
void priority(Process processes[], int n) {
    printf("\nPriority Scheduling:\n");
    int currentTime = 0;
    for (int i = 0; i < n; ++i) {
        int highestPriorityIndex = findHighestPriority(processes, n);
        if (highestPriorityIndex != -1) {
            currentTime += processes[highestPriorityIndex].burstTime;
            printf("Process %d executed from time %d to %d\n", processes[highestPriorityIndex].id, currentTime - processes[highestPriorityIndex].burstTime, currentTime);
            processes[highestPriorityIndex].executed = true;
        }
    }
}
int main() {
    int n;
    printf("Enter the number of processes: ");
    scanf("%d", &n);
    Process processes[n];
    // Input process details
    for (int i = 0; i < n; ++i) {
        processes[i].id = i + 1;
        printf("Enter arrival time for process %d: ", i + 1);
        scanf("%d", &processes[i].arrivalTime);
        printf("Enter burst time for process %d: ", i + 1);
        scanf("%d", &processes[i].burstTime);
        printf("Enter priority for process %d: ", i + 1);
        scanf("%d", &processes[i].priority);
        processes[i].executed = false;
    }
    // Sort processes by arrival time
    sortByArrivalTime(processes, n);
    // Execute scheduling algorithms
    fcfs(processes, n);
    sjf(processes, n);
    priority(processes, n);
    return 0;
}
EXP 6
7.Process Management: Synchronization:Write a C program to implement solution of Producer consumer problem through Semaphore
#include<stdio.h> 
#include<stdlib.h> 
int mutex=1,full=0,empty=3,x=0;
int main() 
{ 
    int n; 
    void producer(); 
    void consumer(); 
    int wait(int); 
    int signal(int); 
    printf("\n1.Producer\n2.Consumer\n3.Exit"); 
    while(1) 
    { 
        printf("\nEnter your choice:"); 
        scanf("%d",&n); 
        switch(n) 
        { 
            case 1:    if((mutex==1)&&(empty!=0)) 
                        producer(); 
                    else 
                        printf("Buffer is full!!"); 
 break; 
            case 2:    if((mutex==1)&&(full!=0)) 
                        consumer(); 
                    else 
                        printf("Buffer is empty!!"); 
                    break; 
            case 3: 
                    exit(0); 
                    break; 
        } 
    }
    return 0; 
}
int wait(int s) 
{ 
    return (--s); 
} 
int signal(int s) 
{ 
    return(++s); 
} 
void producer() 
{ 
    mutex=wait(mutex); 
    full=signal(full); 
    empty=wait(empty); 
    x++; 
    printf("\nProducer produces the item %d",x); 
    mutex=signal(mutex); 
} 
void consumer() 
{ 
    mutex=wait(mutex); 
    full=wait(full); 
    empty=signal(empty); 
    printf("\nConsumer consumes item %d",x); 
    x--; 
    mutex=signal(mutex); 
}
EXP 7
8.Process Management: Deadlock: Write a program to demonstrate the concept of deadlock avoidance through Banker's Algorithm 
#include <stdio.h>
int main() {
int n, m, i, j, k;
printf("Enter the number of processes: "); scanf("%d", &n);
printf("Enter the number of resources: "); scanf("%d", &m);
// Declare matrices 
int alloc [n] [m], max [n] [m], avail [m], need [n] [m]; 
int f[n], ans[n], ind = 0;
// Get Allocation Matrix input 
printf("\nEnter the Allocation Matrix:\n"); for (i = 0; i < n; i++) { printf("Process P%d: ", 1); 
    for (j = 0; j < m; j++) { 
        scanf("%d", &alloc[1][j]);
}
}
// Get Maximum Resource Matrix input
printf("\nEnter the Max Matrix:\n"); for (i = 0; i < n; i++) { printf("Process P%d: ", 1); scanf("%d", &max[i][j]); }
}
// Get Available Resources input 
printf("\nEnter the Available Resources: \n"); for (j=0; j < m; j++) { scanf("%d", &avail[j]);
}
// Calculate Need Matrix
for (i=0; i < n; i++) { 
    for(j=0; j<n; j++) { 
        need[i][j] = max[i][j] alloc[i][j];
}
}
// Initialize finish array 
for ( k = theta ;k< neg;k++) { 
    f[k] = 0
}
// Safety Algorithm
int safe = 1; // Assume safe initially
while (safe) {
safe = 0; // Reset for each iteration
for(i = 0; i< n; i++){
    if (f[i] == 0) { // processs yet not finished
int possible = 1;
for (j=0; 3 < pi j++) { 
    if (need> avail[j]) {
possible = 0; // Not enough resources
break;
} } 
if (possible) {
    ans [ind ++] = i; 
    for (k = 0; k avail[k] += alloc[i][k]; // Simulate resource release } 
    f[t] = 1 safe = 1;
}}
// Check if the system is in a safe state
int deadlock = 0;
for ( j = 0; j<n; j++) {
if (need[i][j]> avail[j]) {
possible = 0; // Not enough resources
break;
}
}
if (possible) {
ans [ind++] = i; 
for ( k =0: k < n k ++) {
avail [k] += alloc[i][k]; // Simulate resource release
}
f[i] = 1
safe = 1;
}
}
}
}
// Check if the system is in a safe state
int deadlock = 0 ;
for(i = 0; i < n; i++) {
if(f[i] == 0) {
deadlock = 1 ;
break;
}
}
if (deadlock == 0) { 
    printf("\nSystem is in a safe state. \nSafe Sequence: "); 
    for (i = 0; i<n-1; i++){
printf("P%d -> ans[i]);
}
printf("P%d\n", ans[n-1]);
} else{
printf("\nSystem is in an unsafe state. Deadlock possible!\n");
}
return 0; } }
EXP 8
9.Memory Management: Write a program to demonstrate the concept of dynamic partitioning placement algorithms, Best Fit, First Fit, Worst-Fit 
FIRST FIT 
#include<stdio.h>
int main(){
int bsize[10],psize [10], bno, pno, flags [10], allocation [10],i,j;
for(i=0;i<10;i++){
flags[1]=0; 
allocation[i]=-1;
}
printf("Enter no. of blocks:");
scanf("%d",&bno);
printf("\nenter size of each block");
for(i=0;i<bno; i++){
scanf("%d",&bsize[i]);
}
printf("\nenter no. of processes:"); 
scanf("%d",&pno);
printf("\nenter size of each block");
for(i=0;i<pno; i++){
scanf("%d",&psize[i]);
}
for(i=0;1<pno;i++){
for(j=0;j<bno;j++){
if(flags[j]==0&&bsize[j]>=psize[1]){
allocation[j]=1;
flags[j]=1;
break;
}
} }
printf("\nallocation details:-");
printf("\nblock no.\tsize\tprocess no.\t\tsize");
for(i=0;i<bno; i++){
printf("\n%d\t\t%d\t\t",1+1,bsize[1]);
if(flags[i]==1){
printf("%d\t\t\t%d", allocation[1]+1,psize[allocation[1]]);
}else{
printf("not allocated");
}}
return 0;
}
BEST FIT
#include <stdio.h>
int main() {
    int n, p, i, j, temp;
    int part_size[20];
    int process[20];
    int flag[20] = {0};
    printf("Enter number of partitions: ");
    scanf("%d", &n);
    for (i = 0; i < n; i++) {
        printf("Enter size of partition %d: ", i + 1);
        scanf("%d", &part_size[i]);
    }
    printf("Enter number of processes: ");
    scanf("%d", &p);
    for (i = 0; i < p; i++) {
        printf("Enter size of process %d: ", i + 1);
        scanf("%d", &process[i]);
    }
    for (i = 0; i < n; i++) {
        for (j = i + 1; j < n; j++) {
            if (part_size[i] > part_size[j]) {
                temp = part_size[i];
                part_size[i] = part_size[j];
                part_size[j] = temp;
            }
        }
    }
    for (i = 0; i < p; i++) {
        for (j = 0; j < n; j++) {
            if (part_size[j] >= process[i] && flag[j] == 0) {
                printf("\nProcess P%d (%d) allocated to Partition %d (%d)", i + 1, process[i], j + 1, part_size[j]);
                flag[j] = 1;
                break;
            }
        }
        if (j == n) {
            printf("\nProcess P%d (%d) cannot be allocated", i + 1, process[i]);
        }
    }
    return 0;
}
WORST FIT
#include <stdio.h>
#define MAX 25
void main() {
    int frag[MAX], b[MAX], f[MAX], bf[MAX], ff[MAX];
    int i, j, nb, nf, temp;
    printf("\tMemory Management Scheme First Fit\n");
    printf("Enter the number of blocks: ");
    scanf("%d", &nb);
    printf("Enter the number of files: ");
    scanf("%d", &nf);
    printf("\nEnter the size of the blocks:\n");
    for (i = 1; i <= nb; i++) {
        printf("Block %d: ", i);
        scanf("%d", &b[i]);
    }
    printf("\nEnter the size of the files:\n");
    for (i = 1; i <= nf; i++) {
        printf("File %d: ", i);
        scanf("%d", &f[i]);
    }
    for (i = 1; i <= nf; i++) {
        for (j = 1; j <= nb; j++) {
            if (bf[j] != 1) {
                temp = b[j] - f[i];
                if (temp >= 0) {
                    ff[i] = j;
                    break;
                }  }   }
        frag[i] = temp;
        bf[ff[i]] = 1;
    }
    printf("\nFile_no:\tFile_size:\tBlock_no:\tBlock_size:\tFragment\n");
    for (i = 1; i <= nf; i++) {
        printf("%d\t\t%d\t\t%d\t\t%d\t\t%d\n", i, f[i], ff[i], b[ff[i]], frag[i]);
    }
}
ALL FITS
Memory Management: Dynamic Partitioning Placement Algorithms (Best Fit, First Fit, Worst Fit):
#include <stdio.h>
#define NUM_PARTITIONS 5
#define NUM_PROCESSES 5
int partitions[NUM_PARTITIONS];
int processes[NUM_PROCESSES];
void best_fit() {
    int allocation[NUM_PROCESSES] = {0};
    for (int i = 0; i < NUM_PROCESSES; ++i) {
        int best_index = -1;
        for (int j = 0; j < NUM_PARTITIONS; ++j) {
            if (partitions[j] >= processes[i]) {
                if (best_index == -1 || partitions[j] < partitions[best_index]) {
                    best_index = j;
                }
        }
        }
        if (best_index != -1) {
            allocation[i] = 1;
            partitions[best_index] -= processes[i];
        }
    }
    printf("Best Fit Allocation:\n");
    for (int i = 0; i < NUM_PROCESSES; ++i) {
        if (allocation[i]) {
            printf("Process %d allocated to partition\n", i);
        } else {
            printf("Process %d not allocated\n", i);
        }
    }
}
void first_fit() {
    int allocation[NUM_PROCESSES] = {0};
    for (int i = 0; i < NUM_PROCESSES; ++i) {
        for (int j = 0; j < NUM_PARTITIONS; ++j) {
            if (partitions[j] >= processes[i]) {
                allocation[i] = 1;
                partitions[j] -= processes[i];
                break;
            }
        }
    }
    printf("First Fit Allocation:\n");
    for (int i = 0; i < NUM_PROCESSES; ++i) {
        if (allocation[i]) {
            printf("Process %d allocated to partition\n", i);
        } else {
            printf("Process %d not allocated\n", i);
        }
    }
}
void worst_fit() {
    int allocation[NUM_PROCESSES] = {0};
    for (int i = 0; i < NUM_PROCESSES; ++i) {
        int worst_index = -1;
        for (int j = 0; j < NUM_PARTITIONS; ++j) {
            if (partitions[j] >= processes[i]) {
                if (worst_index == -1 || partitions[j] > partitions[worst_index]) {
                    worst_index = j;
                }
            }
        }
        if (worst_index != -1) {
            allocation[i] = 1;
            partitions[worst_index] -= processes[i];
        }
    }
    printf("Worst Fit Allocation:\n");
    for (int i = 0; i < NUM_PROCESSES; ++i) {
        if (allocation[i]) {
            printf("Process %d allocated to partition\n", i);
        } else {
            printf("Process %d not allocated\n", i);
        }
    }
}
int main() {
    // Initialize partitions and processes
    for (int i = 0; i < NUM_PARTITIONS; ++i) {
        printf("Enter size of partition %d: ", i);
        scanf("%d", &partitions[i]);
    }
    for (int i = 0; i < NUM_PROCESSES; ++i) {
        printf("Enter size of process %d: ", i);
        scanf("%d", &processes[i]);
    }
    // Perform memory allocation using each algorithm
    best_fit();
    first_fit();
    worst_fit();

    return 0;
}
EXP 9
10.Memory Management: Virtual Memory:Write a program in C demonstrate the concept of page replacement policies for handling page faults eg: FIFO, LRU etc.
#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>
#define FRAME_SIZE 3 
void initializeFrames(int frames[]) {
    for (int i = 0; i < FRAME_SIZE; i++) {
        frames[i] = -1;
    }
}
void displayFrames(int frames[]) {
    printf("Frames: ");
    for (int i = 0; i < FRAME_SIZE; i++) {
        if (frames[i] == -1) {
            printf("- ");
        } else {
            printf("%d ", frames[i]);
        }
    }
    printf("\n");
}
bool isPagePresent(int frames[], int page) {
    for (int i = 0; i < FRAME_SIZE; i++) {
        if (frames[i] == page) {
            return true;
        }
    }
    return false;
}
void FIFO(int pages[], int n) {
    int frames[FRAME_SIZE];
    initializeFrames(frames);
    int pageFaults = 0;
    int index = 0; 
    printf("\nFIFO Page Replacement Algorithm:\n");
    for (int i = 0; i < n; i++) {
        printf("Reference: %d\n", pages[i]);
        if (!isPagePresent(frames, pages[i])) {
            frames[index] = pages[i];
            index = (index + 1) % FRAME_SIZE; 
            pageFaults++;
        }
        displayFrames(frames);
    }
    printf("Total Page Faults: %d\n", pageFaults);
}
void LRU(int pages[], int n) {
    int frames[FRAME_SIZE];
    initializeFrames(frames);
    int pageFaults = 0;
    int leastRecentlyUsed[FRAME_SIZE] = {0}; 
    printf("\nLRU Page Replacement Algorithm:\n");
    for (int i = 0; i < n; i++) {
        printf("Reference: %d\n", pages[i]);
        if (!isPagePresent(frames, pages[i])) {
            int min = leastRecentlyUsed[0];
            int index = 0;
            for (int j = 1; j < FRAME_SIZE; j++) {
                if (leastRecentlyUsed[j] < min) {
                    min = leastRecentlyUsed[j];
                    index = j;
                }
            }
            frames[index] = pages[i];
            leastRecentlyUsed[index] = i + 1; 
            pageFaults++;
        } else {
            for (int j = 0; j < FRAME_SIZE; j++) {
                if (frames[j] == pages[i]) {
                    leastRecentlyUsed[j] = i + 1; 
                    break;
                }
            }
        }
        displayFrames(frames);
    }
    printf("Total Page Faults: %d\n", pageFaults);
}
int main() {
    int pages[] = {7, 0, 1, 2, 0, 3, 0, 4, 2, 3, 0, 3, 2};
    int n = sizeof(pages) / sizeof(pages[0]);

    FIFO(pages, n);
    LRU(pages, n);
    return 0;
}
EXP 10
11.File Management & I/O Management:Write a program in C to do disk scheduling - FCFS, SCAN, C-SCAN
#include <stdio.h>
#include <stdlib.h>
void FCFS(int head, int requests[], int num_requests) {
    int total_seek = 0;
    printf("FCFS Disk Scheduling:\n");
    printf("Head movement sequence: %d ", head);
    for (int i = 0; i < num_requests; i++) {
        total_seek += abs(head - requests[i]);
        head = requests[i];
        printf("-> %d ", head);
    }
    printf("\nTotal seek time: %d\n\n", total_seek);
}
void SCAN(int head, int requests[], int num_requests, int max_cylinder) {
    int total_seek = 0;
    int direction = 1; // 1 for increasing, -1 for decreasing
    int index = 0;
    printf("SCAN Disk Scheduling:\n");
    printf("Head movement sequence: %d ", head);
    if (head > max_cylinder / 2) {
        direction = -1;
    }
    for (int i = 0; i < num_requests - 1; i++) {
        for (int j = i + 1; j < num_requests; j++) {
            if (requests[i] > requests[j]) {
                int temp = requests[i];
                requests[i] = requests[j];
                requests[j] = temp;
            }
        }
    }
    if (direction == 1) {
        while (index < num_requests && requests[index] < head) {
            index++;
        } } else {
        index = num_requests - 1;
        while (index >= 0 && requests[index] > head) {
            index--;
        }
    }
    while (index >= 0 && index < num_requests) {
        total_seek += abs(head - requests[index]);
        head = requests[index];
        printf("-> %d ", head);
        index += direction;
    }
    total_seek += abs(head - (direction == 1 ? max_cylinder : 0));
    head = (direction == 1 ? max_cylinder : 0);
    printf("-> %d ", head);

    printf("\nTotal seek time: %d\n\n", total_seek);
}
void CSCAN(int head, int requests[], int num_requests, int max_cylinder) {
    int total_seek = 0;
    printf("C-SCAN Disk Scheduling:\n");
    printf("Head movement sequence: %d ", head);
    for (int i = 0; i < num_requests - 1; i++) {
        for (int j = i + 1; j < num_requests; j++) {
            if (requests[i] > requests[j]) {
                int temp = requests[i];
                requests[i] = requests[j];
                requests[j] = temp;
            }
        }
    }
    for (int i = 0; i < num_requests; i++) {
        total_seek += abs(head - requests[i]);
        head = requests[i];
        printf("-> %d ", head);
    }
    total_seek += abs(head - 0);
    head = 0;
    printf("-> %d ", head);
        for (int i = 0; i < num_requests; i++) {
        total_seek += abs(head - requests[i]);
        head = requests[i];
        printf("-> %d ", head);
    }
    printf("\nTotal seek time: %d\n\n", total_seek);
}
int main() {
    int head, num_requests, max_cylinder;
    printf("Enter the current position of the head: ");
    scanf("%d", &head);
    printf("Enter the number of requests: ");
    scanf("%d", &num_requests);
    int requests[num_requests];
    printf("Enter the requests:\n");
    for (int i = 0; i < num_requests; i++) {
        scanf("%d", &requests[i]);
    }
    printf("Enter the maximum cylinder number: ");
    scanf("%d", &max_cylinder);
    FCFS(head, requests, num_requests);
    SCAN(head, requests, num_requests, max_cylinder);
    CSCAN(head, requests, num_requests, max_cylinder);
    return 0;
}
